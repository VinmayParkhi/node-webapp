pipeline {
    agent any
    environment{
        SONAR_HOME = tool "Sonarqube"
    }
    
    stages {
        
        stage("Code"){
            steps{
                git url: "https://github.com/VinmayParkhi/node-webapp.git", branch: "main"
                echo 'Code Cloned Successfully'
            }
        }
        stage("SonarQube Analysis"){
            steps{
                withSonarQubeEnv("Sonarqube"){
                    sh "$SONAR_HOME/bin/sonar-scanner -Dsonar.projectName=node-webapp -Dsonar.projectKey=node-webapp"
                }
            }
        }
        stage("SonarQube Quality Gates"){
            steps{
                timeout(time: 1, unit: "MINUTES"){
                    waitForQualityGate abortPipeline: false
                }
            }
        }
        stage("OWASP"){
            steps{
                dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'OWASP'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage("Build and Test"){
            steps{
                sh "docker build -t node-new ."
                echo 'Code Built Successfully'
            }
        }
        stage("Scan Image"){
            steps{
                echo 'Image Scanning Successful'
            }
        }
        stage("Trivy"){
            steps{
                sh 'trivy image node-new'
            }
        }
        stage("Push to DockerHub"){
            steps{
                withCredentials([usernamePassword(credentialsId:"DockerHub",passwordVariable:"dockerHubPass",usernameVariable:"dockerHubUser")]){
                sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPass}"
                sh "docker tag node-new:latest ${env.dockerHubUser}/node-new:latest"
                sh "docker push ${env.dockerHubUser}/node-new:latest"
                echo 'Image Pushed to DockerHub'
                }
            }
        }
        stage("Deploy"){
            steps{
                sh "docker-compose down && docker-compose up -d"
                echo 'Deployment Successful'
            }
        }
    }
}
